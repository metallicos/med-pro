package com.medicalappointment.controllers;

import com.medicalappointment.models.Patient;
import com.medicalappointment.service.IPatientService;
import com.medicalappointment.service.exception.ServiceException;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;

import java.io.IOException;
import java.time.LocalDate;

public class PatientController {

    @FXML
    private TextField nomField;
    @FXML
    private TextField prenomField;
    @FXML
    private DatePicker dateNaissancePicker;
    @FXML
    private TextField adresseField;
    @FXML
    private TextField telephoneField;
    @FXML
    private TableView<Patient> patientTable;
    @FXML
    private TableColumn<Patient, Integer> idColumn;
    @FXML
    private TableColumn<Patient, String> nomColumn;
    @FXML
    private TableColumn<Patient, String> prenomColumn;
    @FXML
    private TableColumn<Patient, LocalDate> dateNaissanceColumn;
    @FXML
    private TableColumn<Patient, String> adresseColumn;
    @FXML
    private TableColumn<Patient, String> telephoneColumn;

    private IPatientService patientService;
    private ObservableList<Patient> patientList;

    // Constructor for dependency injection (will be called by FXMLLoader if using custom controller factory)
    public PatientController(IPatientService patientService) {
        this.patientService = patientService;
    }

    // Default constructor for FXMLLoader (if not using custom controller factory)
    public PatientController() {
        try {
            this.patientService = new com.medicalappointment.service.PatientServiceImpl(
                new com.medicalappointment.models.dao.PatientDAOImpl(
                    com.medicalappointment.models.dao.DatabaseConnectionManager.getInstance()
                )
            );
        } catch (Exception e) {
            e.printStackTrace();
            // Optionally, show an alert or log the error
        }
    }

    @FXML
    public void initialize() {
        // Initialize table columns
        idColumn.setCellValueFactory(new PropertyValueFactory<>("id"));
        nomColumn.setCellValueFactory(new PropertyValueFactory<>("nom"));
        prenomColumn.setCellValueFactory(new PropertyValueFactory<>("prenom"));
        dateNaissanceColumn.setCellValueFactory(new PropertyValueFactory<>("dateNaissance"));
        adresseColumn.setCellValueFactory(new PropertyValueFactory<>("adresse"));
        telephoneColumn.setCellValueFactory(new PropertyValueFactory<>("telephone"));

        patientList = FXCollections.observableArrayList();
        patientTable.setItems(patientList);

        // Load patients when the view is initialized
        loadPatients();

        // Add listener to table selection to populate fields
        patientTable.getSelectionModel().selectedItemProperty().addListener(
                (observable, oldValue, newValue) -> showPatientDetails(newValue));
    }

    private void loadPatients() {
        try {
            patientList.clear();
            patientList.addAll(patientService.getAllPatients());
        } catch (ServiceException e) {
            showAlert(Alert.AlertType.ERROR, "Error", "Failed to load patients: " + e.getMessage());
        }
    }

    private void showPatientDetails(Patient patient) {
        if (patient != null) {
            nomField.setText(patient.getNom());
            prenomField.setText(patient.getPrenom());
            dateNaissancePicker.setValue(patient.getDateNaissance());
            adresseField.setText(patient.getAdresse());
            telephoneField.setText(patient.getTelephone());
        } else {
            clearFields();
        }
    }

    @FXML
    private void handleAddPatient() {
        try {
            Patient newPatient = new Patient(
                    0, // ID will be generated by DB
                    nomField.getText(),
                    prenomField.getText(),
                    dateNaissancePicker.getValue(),
                    adresseField.getText(),
                    telephoneField.getText()
            );
            patientService.addPatient(newPatient);
            showAlert(Alert.AlertType.INFORMATION, "Success", "Patient added successfully!");
            loadPatients();
            clearFields();
        } catch (ServiceException e) {
            showAlert(Alert.AlertType.ERROR, "Error", "Failed to add patient: " + e.getMessage());
        }
    }

    @FXML
    private void handleUpdatePatient() {
        Patient selectedPatient = patientTable.getSelectionModel().getSelectedItem();
        if (selectedPatient != null) {
            try {
                selectedPatient.setNom(nomField.getText());
                selectedPatient.setPrenom(prenomField.getText());
                selectedPatient.setDateNaissance(dateNaissancePicker.getValue());
                selectedPatient.setAdresse(adresseField.getText());
                selectedPatient.setTelephone(telephoneField.getText());

                patientService.updatePatient(selectedPatient);
                showAlert(Alert.AlertType.INFORMATION, "Success", "Patient updated successfully!");
                loadPatients();
                clearFields();
            } catch (ServiceException e) {
                showAlert(Alert.AlertType.ERROR, "Error", "Failed to update patient: " + e.getMessage());
            }
        } else {
            showAlert(Alert.AlertType.WARNING, "No Selection", "Please select a patient to update.");
        }
    }

    @FXML
    private void handleDeletePatient() {
        Patient selectedPatient = patientTable.getSelectionModel().getSelectedItem();
        if (selectedPatient != null) {
            try {
                patientService.deletePatient(selectedPatient.getId());
                showAlert(Alert.AlertType.INFORMATION, "Success", "Patient deleted successfully!");
                loadPatients();
                clearFields();
            } catch (ServiceException e) {
                showAlert(Alert.AlertType.ERROR, "Error", "Failed to delete patient: " + e.getMessage());
            }
        } else {
            showAlert(Alert.AlertType.WARNING, "No Selection", "Please select a patient to delete.");
        }
    }

    @FXML
    private void handleClearFields() {
        clearFields();
    }

    private void clearFields() {
        nomField.clear();
        prenomField.clear();
        dateNaissancePicker.setValue(null);
        adresseField.clear();
        telephoneField.clear();
        patientTable.getSelectionModel().clearSelection();
    }

    @FXML
    private void handleBackToMain(ActionEvent event) {
        try {
            Parent root = FXMLLoader.load(getClass().getResource("/com/medicalappointment/views/main_view.fxml"));
            Scene scene = new Scene(root, 800, 600);
            scene.getStylesheets().add(getClass().getResource("/com/medicalappointment/views/style.css").toExternalForm());
            Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            stage.setScene(scene);
            stage.setTitle("Medical Appointment Management");
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
            showAlert(Alert.AlertType.ERROR, "Error", "Failed to go back to main menu: " + e.getMessage());
        }
    }

    private void showAlert(Alert.AlertType alertType, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}


