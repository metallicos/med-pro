package com.medicalappointment.controllers;

import com.medicalappointment.models.Patient;
import com.medicalappointment.service.IPatientService;
import com.medicalappointment.service.exception.ServiceException;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

public class PatientController extends BaseController {

    @FXML
    private TextField nomField;
    @FXML
    private TextField prenomField;
    @FXML
    private DatePicker dateNaissancePicker;
    @FXML
    private TextField adresseField;
    @FXML
    private TextField telephoneField;
    @FXML
    private TextField searchField;
    @FXML
    private TableView<Patient> patientTable;
    @FXML
    private TableColumn<Patient, Integer> idColumn;
    @FXML
    private TableColumn<Patient, String> nomColumn;
    @FXML
    private TableColumn<Patient, String> prenomColumn;
    @FXML
    private TableColumn<Patient, LocalDate> dateNaissanceColumn;
    @FXML
    private TableColumn<Patient, String> adresseColumn;
    @FXML
    private TableColumn<Patient, String> telephoneColumn;

    private IPatientService patientService;
    private ObservableList<Patient> patientList;

    // Constructor for dependency injection (will be called by FXMLLoader if using custom controller factory)
    public PatientController(IPatientService patientService) {
        this.patientService = patientService;
    }

    // Default constructor for FXMLLoader (if not using custom controller factory)
    public PatientController() {
        try {
            this.patientService = new com.medicalappointment.service.PatientServiceImpl(
                new com.medicalappointment.models.dao.PatientDAOImpl(
                    com.medicalappointment.models.dao.DatabaseConnectionManager.getInstance()
                )
            );
        } catch (Exception e) {
            e.printStackTrace();
            // Optionally, show an alert or log the error
        }
    }    @FXML
    public void initialize() {
        // Initialize table columns with explicit cell value factories
        idColumn.setCellValueFactory(cellData -> {
            Integer id = cellData.getValue().getId();
            return new javafx.beans.property.SimpleIntegerProperty(id).asObject();
        });
        
        nomColumn.setCellValueFactory(cellData -> {
            String nom = cellData.getValue().getNom();
            return new javafx.beans.property.SimpleStringProperty(nom);
        });
        
        prenomColumn.setCellValueFactory(cellData -> {
            String prenom = cellData.getValue().getPrenom();
            return new javafx.beans.property.SimpleStringProperty(prenom);
        });
        
        dateNaissanceColumn.setCellValueFactory(cellData -> {
            java.time.LocalDate dateNaissance = cellData.getValue().getDateNaissance();
            return new javafx.beans.property.SimpleObjectProperty<>(dateNaissance);
        });
        
        adresseColumn.setCellValueFactory(cellData -> {
            String adresse = cellData.getValue().getAdresse();
            return new javafx.beans.property.SimpleStringProperty(adresse);
        });
        
        telephoneColumn.setCellValueFactory(cellData -> {
            String telephone = cellData.getValue().getTelephone();
            return new javafx.beans.property.SimpleStringProperty(telephone);
        });

        patientList = FXCollections.observableArrayList();
        patientTable.setItems(patientList);

        // Load patients when the view is initialized
        loadPatients();

        // Add listener to table selection to populate fields
        patientTable.getSelectionModel().selectedItemProperty().addListener(
                (observable, oldValue, newValue) -> showPatientDetails(newValue));
    }

    private void loadPatients() {
        try {
            patientList.clear();
            List<Patient> patients = patientService.getAllPatients();
            patientList.addAll(patients);
            
            // Force table refresh
            patientTable.refresh();
        } catch (ServiceException e) {
            showAlert(Alert.AlertType.ERROR, "Error", "Failed to load patients: " + e.getMessage());
        }
    }

    private void showPatientDetails(Patient patient) {
        if (patient != null) {
            nomField.setText(patient.getNom());
            prenomField.setText(patient.getPrenom());
            dateNaissancePicker.setValue(patient.getDateNaissance());
            adresseField.setText(patient.getAdresse());
            telephoneField.setText(patient.getTelephone());
        } else {
            clearFields();
        }
    }    @FXML
    private void handleAddPatient() {
        try {
            Patient newPatient = new Patient(
                    0, // ID will be generated by DB
                    nomField.getText(),
                    prenomField.getText(),
                    dateNaissancePicker.getValue(),
                    adresseField.getText(),
                    telephoneField.getText()
            );
            patientService.addPatient(newPatient);
            showAlert(Alert.AlertType.INFORMATION, "Success", "Patient added successfully!");
            loadPatients();
            clearFields();
        } catch (ServiceException e) {
            showAlert(Alert.AlertType.ERROR, "Error", "Failed to add patient: " + e.getMessage());
        }
    }

    @FXML
    private void handleUpdatePatient() {
        Patient selectedPatient = patientTable.getSelectionModel().getSelectedItem();
        if (selectedPatient != null) {
            try {
                selectedPatient.setNom(nomField.getText());
                selectedPatient.setPrenom(prenomField.getText());
                selectedPatient.setDateNaissance(dateNaissancePicker.getValue());
                selectedPatient.setAdresse(adresseField.getText());
                selectedPatient.setTelephone(telephoneField.getText());

                patientService.updatePatient(selectedPatient);
                showAlert(Alert.AlertType.INFORMATION, "Success", "Patient updated successfully!");
                loadPatients();
                clearFields();
            } catch (ServiceException e) {
                showAlert(Alert.AlertType.ERROR, "Error", "Failed to update patient: " + e.getMessage());
            }
        } else {
            showAlert(Alert.AlertType.WARNING, "No Selection", "Please select a patient to update.");
        }
    }

    @FXML
    private void handleDeletePatient() {
        Patient selectedPatient = patientTable.getSelectionModel().getSelectedItem();
        if (selectedPatient != null) {
            try {
                patientService.deletePatient(selectedPatient.getId());
                showAlert(Alert.AlertType.INFORMATION, "Success", "Patient deleted successfully!");
                loadPatients();
                clearFields();
            } catch (ServiceException e) {
                showAlert(Alert.AlertType.ERROR, "Error", "Failed to delete patient: " + e.getMessage());
            }
        } else {
            showAlert(Alert.AlertType.WARNING, "No Selection", "Please select a patient to delete.");
        }
    }

    @FXML
    private void handleClearFields() {
        clearFields();
    }

    private void clearFields() {
        nomField.clear();
        prenomField.clear();
        dateNaissancePicker.setValue(null);
        adresseField.clear();
        telephoneField.clear();
        patientTable.getSelectionModel().clearSelection();
    }

    /**
     * Handle search functionality for patients
     */
    @FXML
    private void handleSearchPatients() {
        String searchText = searchField.getText().trim();
        if (searchText.isEmpty()) {
            handleShowAllPatients();
            return;
        }

        try {
            List<Patient> allPatients = patientService.getAllPatients();
            List<Patient> filteredPatients = allPatients.stream()
                .filter(patient -> 
                    patient.getNom().toLowerCase().contains(searchText.toLowerCase()) ||
                    patient.getPrenom().toLowerCase().contains(searchText.toLowerCase()) ||
                    patient.getTelephone().toLowerCase().contains(searchText.toLowerCase()) ||
                    patient.getAdresse().toLowerCase().contains(searchText.toLowerCase())
                )
                .collect(Collectors.toList());
            
            patientList.clear();
            patientList.addAll(filteredPatients);
            
            if (filteredPatients.isEmpty()) {
                showAlert(Alert.AlertType.INFORMATION, "Résultats de recherche", 
                    "Aucun patient trouvé pour \"" + searchText + "\"");
            }
        } catch (ServiceException e) {
            showAlert(Alert.AlertType.ERROR, "Error", "Failed to search patients: " + e.getMessage());
        }
    }

    /**
     * Show all patients (clear search filter)
     */
    @FXML
    private void handleShowAllPatients() {
        searchField.clear();
        loadPatients();
    }

    @FXML
    private void handleBackToMain(ActionEvent event) {
        loadView("/com/medicalappointment/views/main_view.fxml", "Medical Appointment Management", event.getSource());
    }    @Override
    protected void showAlert(Alert.AlertType alertType, String title, String message) {
        super.showAlert(alertType, title, message);
    }
}


